package io.netflow.flows

import java.net.{ InetAddress, InetSocketAddress }

trait Flow[T] {
  def version: String
  def length: Int
  def sender: InetSocketAddress
  def senderIP = sender.getAddress.getHostAddress
  def senderPort = sender.getPort
  def json: String
}

/**
 * Unified interface for UDP Packets generated by NetFlow and sFlow.
 */
trait FlowPacket {
  def version: String
  def sender: InetSocketAddress
  def senderIP = sender.getAddress.getHostAddress
  def senderPort = sender.getPort
  var date = new org.joda.time.DateTime
  var count: Int = -1
  var uptime: Long = -1L
  var flows = Vector[Flow[_]]()
}

/**
 * Unified interface for accounting statistics (InetAddress and Networks) generated by NetFlow.
 */
trait NetFlowData[T] extends Flow[T] {
  this: T with Flow[T] =>

  var srcPort: Int = -1
  var dstPort: Int = -1
  var srcAS: Int = -1
  var dstAS: Int = -1
  var srcAddress: InetAddress = defaultAddr
  var dstAddress: InetAddress = defaultAddr
  var nextHop: InetAddress = defaultAddr
  var pkts: Long = -1L
  var bytes: Long = -1L
  var proto: Int = -1
  var tos: Int = -1
  var tcpflags: Int = -1
  var start: Long = -1L
  var stop: Long = -1L
  def duration = (stop - start).toInt

  private def srcAddressIP() = srcAddress.getHostAddress
  private def dstAddressIP() = dstAddress.getHostAddress
  private def nextHopIP() = nextHop.getHostAddress

  protected def jsonExtra = ""
  lazy val json = """
    {
      "flowVersion": "%s",
      "flowSender": "%s/%s",
      "srcPort": %s,
      "dstPort": %s,
      "srcAddress": "%s",
      "dstAddress": "%s",
      "srcAS": %s,
      "dstAS": %s,
      "nextHop": "%s",
      "proto": %s,
      "tos": %s,
      "pkts": %s,
      "bytes": %s,
      "start": %s,
      "stop": %s,
      "tcpflags": %s %s
    }""".trim().format(
    version, senderIP, senderPort, srcPort, dstPort, srcAddressIP, dstAddressIP,
    srcAS, dstAS, nextHopIP, proto, tos, pkts, bytes, start, stop, tcpflags, jsonExtra)

  override def toString() = "%s from %s/%s %s:%s (%s) -> %s -> %s:%s (%s) Proto %s - ToS %s - %s pkts - %s bytes".format(
    version, senderIP, senderPort, srcAddress.getHostAddress, srcPort, srcAS,
    nextHop.getHostAddress, dstAddress.getHostAddress, dstPort, dstAS, proto, tos, pkts, bytes)
}
